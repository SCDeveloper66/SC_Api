// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using StandardCanMobileAPI.Models.StoreProcedure;

namespace StandardCanMobileAPI.Models
{
    public partial class StandardcanContext : DbContext
    {
        public StandardcanContext()
        {
        }

        public StandardcanContext(DbContextOptions<StandardcanContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BookCar> BookCar { get; set; }
        public virtual DbSet<BookCarEmp> BookCarEmp { get; set; }
        public virtual DbSet<BookRoom> BookRoom { get; set; }
        public virtual DbSet<BookRoomDevice> BookRoomDevice { get; set; }
        public virtual DbSet<BookRoomEmp> BookRoomEmp { get; set; }
        public virtual DbSet<BookTimeStatus> BookTimeStatus { get; set; }
        public virtual DbSet<CnfReport> CnfReport { get; set; }
        public virtual DbSet<CnfRoom> CnfRoom { get; set; }
        public virtual DbSet<CnfRoomStatus> CnfRoomStatus { get; set; }
        public virtual DbSet<EmpBehavior> EmpBehavior { get; set; }
        public virtual DbSet<EmpCard> EmpCard { get; set; }
        public virtual DbSet<EmpInoutSummary> EmpInoutSummary { get; set; }
        public virtual DbSet<EmpLeaveQuota> EmpLeaveQuota { get; set; }
        public virtual DbSet<EmpLeaveSummary> EmpLeaveSummary { get; set; }
        public virtual DbSet<EmpNote> EmpNote { get; set; }
        public virtual DbSet<EmpProfile> EmpProfile { get; set; }
        public virtual DbSet<EmpWorks> EmpWorks { get; set; }
        public virtual DbSet<InterfaceLog> InterfaceLog { get; set; }
        public virtual DbSet<MasApproveStatus> MasApproveStatus { get; set; }
        public virtual DbSet<MasCar> MasCar { get; set; }
        public virtual DbSet<MasCarReason> MasCarReason { get; set; }
        public virtual DbSet<MasCarType> MasCarType { get; set; }
        public virtual DbSet<MasCourse> MasCourse { get; set; }
        public virtual DbSet<MasDepartment> MasDepartment { get; set; }
        public virtual DbSet<MasDestination> MasDestination { get; set; }
        public virtual DbSet<MasEmployeeOffsite> MasEmployeeOffsite { get; set; }
        public virtual DbSet<MasExpense> MasExpense { get; set; }
        public virtual DbSet<MasExpert> MasExpert { get; set; }
        public virtual DbSet<MasFormula> MasFormula { get; set; }
        public virtual DbSet<MasFormulaRang> MasFormulaRang { get; set; }
        public virtual DbSet<MasFormulaType> MasFormulaType { get; set; }
        public virtual DbSet<MasFormulaValue> MasFormulaValue { get; set; }
        public virtual DbSet<MasHardware> MasHardware { get; set; }
        public virtual DbSet<MasHoliday> MasHoliday { get; set; }
        public virtual DbSet<MasLeave> MasLeave { get; set; }
        public virtual DbSet<MasNode> MasNode { get; set; }
        public virtual DbSet<MasProject> MasProject { get; set; }
        public virtual DbSet<MasRoom> MasRoom { get; set; }
        public virtual DbSet<MasSectionHead> MasSectionHead { get; set; }
        public virtual DbSet<MasTrainDestination> MasTrainDestination { get; set; }
        public virtual DbSet<ScheduleCourse> ScheduleCourse { get; set; }
        public virtual DbSet<ScheduleCourseCost> ScheduleCourseCost { get; set; }
        public virtual DbSet<ScheduleCourseDetail> ScheduleCourseDetail { get; set; }
        public virtual DbSet<ScheduleCourseEmp> ScheduleCourseEmp { get; set; }
        public virtual DbSet<TimeAttRealtime> TimeAttRealtime { get; set; }
        public virtual DbSet<TimeAttImage> TimeAttImage { get; set; }
        public virtual DbSet<UserGroup> UserGroup { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<XCnfMeeting> XCnfMeeting { get; set; }
        public virtual DbSet<sp_mb_profile_default> SpMbProfileDefault { get; set; }
        public virtual DbSet<sp_mb_image_slide> SpMbImageSlide { get; set; }
        public virtual DbSet<sp_mb_news_list> SpMbNewsList { get; set; }
        public virtual DbSet<sp_mb_news_detail> SpMbNewsDetail { get; set; }
        public virtual DbSet<sp_mb_noti_list> SpMbNotiList { get; set; }
        public virtual DbSet<sp_mb_benefits> SpMbBenefits { get; set; }
        public virtual DbSet<sp_mb_depart_contact> SpMbDepartContact { get; set; }
        public virtual DbSet<sp_mb_emp_inout_realtime> SpMbEmpInoutRealtime { get; set; }
        public virtual DbSet<sp_mb_get_setting> SpMbGetSetting { get; set; }
        public virtual DbSet<sp_mb_emp_profile> SpMbEmpProfile { get; set; }
        public virtual DbSet<sp_mb_emp_ot_hours> SpMbEmpOTHoursResult { get; set; }
        public virtual DbSet<sp_mb_emp_ot_quota> SpMbEmpOTQuotaResult { get; set; }
        public virtual DbSet<sp_mb_emp_benefits> SpMbEmpBenefits { get; set; }
        public virtual DbSet<sp_mb_emp_under> SpMbEmpUnder { get; set; }
        public virtual DbSet<sp_mb_depart_inout_realtime> SpMbDepartInoutRealtime { get; set; }
        public virtual DbSet<sp_mb_depart_ot_hours> SpMbDepartOTHours { get; set; }
        public virtual DbSet<sp_mb_depart_ot_quota> SpMbDepartOTQuota { get; set; }
        public virtual DbSet<sp_mb_master_leave> SpMbMasterLeave { get; set; }
        public virtual DbSet<sp_mb_depart_leave> SpMbDepartLeave { get; set; }
        public virtual DbSet<sp_mb_salary> SpMbSalary { get; set; }
        public virtual DbSet<sp_mb_meeting> SpMbMeeting { get; set; }
        public virtual DbSet<sp_mb_meeting_checkin> SpMbMeetingCheckin { get; set; }
        public virtual DbSet<sp_mb_training_year> SpMbTrainingYear { get; set; }
        public virtual DbSet<sp_mb_training_project> SpMbTrainingProject { get; set; }
        public virtual DbSet<sp_mb_training_lot> SpMbTrainingLot { get; set; }
        public virtual DbSet<sp_mb_training_detail> SpMbTrainingDetail { get; set; }
        public virtual DbSet<sp_mb_notimap_detail> SpMbNotimapDetail { get; set; }
        public virtual DbSet<sp_mb_notimap_image> SpMbNotimapImage { get; set; }
        public virtual DbSet<sp_mb_emp_work_summary> SpMbEmpWorkSummary { get; set; }
        public virtual DbSet<sp_mb_get_holiday> SpMbGetHoliday { get; set; }
        public virtual DbSet<sp_mb_get_schedule> SpMbGetSchedule { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=103.76.180.120;Initial Catalog=SmartCard_Prd;Persist Security Info=True;User ID=sa;Password=jsoft*8800");
                //optionsBuilder.UseSqlServer("Data Source=(local);Initial Catalog=SmartCard_Prd;Persist Security Info=True;User ID=sa;Password=SmC@2020");
                // optionsBuilder.UseSqlServer("Data Source=10.101.247.1;Initial Catalog=SmartCard_Prd;Persist Security Info=True;User ID=sa;Password=cpwsql@2018");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BookCar>(entity =>
            {
                entity.Property(e => e.BcCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.BcStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.BcUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<BookCarEmp>(entity =>
            {
                entity.HasKey(e => new { e.BcId, e.EmpCode });
            });

            modelBuilder.Entity<BookRoom>(entity =>
            {
                entity.Property(e => e.BrCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.BrStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.BrUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<BookRoomDevice>(entity =>
            {
                entity.HasKey(e => new { e.BrId, e.MhwId })
                    .HasName("PK_BOOK_ROOM_DEVICE_1");
            });

            modelBuilder.Entity<BookRoomEmp>(entity =>
            {
                entity.HasKey(e => new { e.BrId, e.EmpCode });

                entity.Property(e => e.CheckinStatus).HasComment("1: ปกติ, 2: สาย, 3: ขาด");
            });

            modelBuilder.Entity<BookTimeStatus>(entity =>
            {
                entity.Property(e => e.BtsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CnfReport>(entity =>
            {
                entity.HasKey(e => e.CprId)
                    .HasName("PK_CNF_PROJECT_REPORT");

                entity.Property(e => e.CprId).ValueGeneratedNever();

                entity.Property(e => e.CprCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CprUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CnfRoom>(entity =>
            {
                entity.HasKey(e => e.CbrId)
                    .HasName("PK_CNF_BOOK_ROOM");

                entity.Property(e => e.CbrId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CnfRoomStatus>(entity =>
            {
                entity.Property(e => e.CrsCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CrsStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.CrsUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EmpBehavior>(entity =>
            {
                entity.Property(e => e.EbCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EbStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.EbUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EmpCard>(entity =>
            {
                entity.Property(e => e.EcCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EcStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.EcUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EmpInoutSummary>(entity =>
            {
                entity.Property(e => e.EtsUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EmpLeaveQuota>(entity =>
            {
                entity.Property(e => e.EsqUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EmpLeaveSummary>(entity =>
            {
                entity.HasKey(e => e.EslId)
                    .HasName("PK_EMP_LEAVE");

                entity.Property(e => e.EslStatus).HasComment("วันที่ทำรายการ");

                entity.Property(e => e.EslUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EmpNote>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EmpProfile>(entity =>
            {
                entity.Property(e => e.EmpCooperative).HasComment("สหกรณ์");

                entity.Property(e => e.EmpDepart1).HasComment("ฝ่าย");

                entity.Property(e => e.EmpDepart2).HasComment("แผนก");

                entity.Property(e => e.EmpFund).HasComment("กองทุนสำรอง");

                entity.Property(e => e.EmpLevelWork).HasComment("ระดับผลงาน");

                entity.Property(e => e.EmpPassword).IsUnicode(false);

                entity.Property(e => e.EmpSocialSecurity).HasComment("ประกันสังคม");

                entity.Property(e => e.EmpStartWork).HasComment("วันที่เริ่มงาน");

                entity.Property(e => e.EmpStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("0: ออกจากงาน, 1: ปกติ");

                entity.Property(e => e.EmpUpdateDevice).HasDefaultValueSql("((0))");

                entity.Property(e => e.EmpUserName).IsUnicode(false);

                entity.Property(e => e.EmpPassIsdefault)
                    .HasColumnName("emp_pass_isdefault")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EmpImage)
                    .HasColumnName("emp_image")
                    .HasMaxLength(200);

                entity.Property(e => e.EmpGroup).HasColumnName("emp_group");
            });

            modelBuilder.Entity<EmpWorks>(entity =>
            {
                entity.Property(e => e.EwCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EwStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.EwUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InterfaceLog>(entity =>
            {
                entity.Property(e => e.UpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasApproveStatus>(entity =>
            {
                entity.Property(e => e.MasId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MasCar>(entity =>
            {
                entity.Property(e => e.McaCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.McaStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.McaUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasCarReason>(entity =>
            {
                entity.Property(e => e.McrCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.McrStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.McrUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasCarType>(entity =>
            {
                entity.Property(e => e.MctCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MctStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MctUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasCourse>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.McsName).HasComment("ชื่อหลักสูตร");

                entity.Property(e => e.McsType).HasComment("ประเภทหลักสูตร O,X");

                entity.Property(e => e.MepId).HasComment("วิทยากร");

                entity.Property(e => e.MflId).HasComment("สูตรคำนวณ");

                entity.Property(e => e.MpjId).HasComment("โครงการ");

                entity.Property(e => e.MtdId).HasComment("สถานที่");

                entity.Property(e => e.UpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasDepartment>(entity =>
            {
                entity.Property(e => e.MdId).ValueGeneratedNever();

                entity.Property(e => e.MdDisMobile).HasDefaultValueSql("((1))");

                entity.Property(e => e.MdStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MdUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasDestination>(entity =>
            {
                entity.Property(e => e.MdtCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MdtStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MdtUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasEmployeeOffsite>(entity =>
            {
                entity.HasKey(e => e.MofId)
                    .HasName("PK_MAS_EMP_OFFSITE");

                entity.Property(e => e.MofCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MofStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MofType).HasComment("1: พนักงานที่เช็คอิน (ประจำ), 2: พนักงานที่เช็คอิน (ชั่วคราว)");

                entity.Property(e => e.MofUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasExpense>(entity =>
            {
                entity.Property(e => e.MexpCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MexpStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MexpUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasExpert>(entity =>
            {
                entity.Property(e => e.MepCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MepStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MepUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasFormula>(entity =>
            {
                entity.Property(e => e.MflInputType).HasComment("1: ช่องป้อนข้อมูล, 2: ตัวเลือกคะแนน");

                entity.Property(e => e.MflStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MflType).HasComment("O, X");
            });

            modelBuilder.Entity<MasFormulaRang>(entity =>
            {
                entity.Property(e => e.MflCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MflStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MflUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasFormulaType>(entity =>
            {
                entity.HasKey(e => e.MftId)
                    .HasName("PK_MAS_FORMULAR_TYPE");
            });

            modelBuilder.Entity<MasFormulaValue>(entity =>
            {
                entity.HasKey(e => e.MfvId)
                    .HasName("PK_MAS_FORMULA_INPUT");

                entity.Property(e => e.MfvCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MfvStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MfvUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasHardware>(entity =>
            {
                entity.Property(e => e.MhwCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MhwName).IsUnicode(false);

                entity.Property(e => e.MhwStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MhwUpdateDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.MhwCreateByNavigation)
                    .WithMany(p => p.MasHardwareMhwCreateByNavigation)
                    .HasForeignKey(d => d.MhwCreateBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MAS_HARDWARE_USERS");

                entity.HasOne(d => d.MhwUpdateByNavigation)
                    .WithMany(p => p.MasHardwareMhwUpdateByNavigation)
                    .HasForeignKey(d => d.MhwUpdateBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MAS_HARDWARE_USERS1");
            });

            modelBuilder.Entity<MasLeave>(entity =>
            {
                entity.Property(e => e.MlId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MasNode>(entity =>
            {
                entity.Property(e => e.MnCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MnStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MnUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasProject>(entity =>
            {
                entity.Property(e => e.MpjCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MpjStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MpjUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasRoom>(entity =>
            {
                entity.Property(e => e.MrmCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MrmStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MrmUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasSectionHead>(entity =>
            {
                entity.Property(e => e.DsId).ValueGeneratedNever();

                entity.Property(e => e.DsStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.DsUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<MasTrainDestination>(entity =>
            {
                entity.HasKey(e => e.MtdId)
                    .HasName("PK_MAS_MEETING_DESTINATION");

                entity.Property(e => e.MtdCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MtdStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.MtdUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ScheduleCourse>(entity =>
            {
                entity.Property(e => e.ScCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ScStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.ScUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ScheduleCourseCost>(entity =>
            {
                entity.HasKey(e => new { e.ScdId, e.ScId, e.MexpId });
            });

            modelBuilder.Entity<ScheduleCourseDetail>(entity =>
            {
                entity.Property(e => e.ScdCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ScdStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.ScdUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ScheduleCourseEmp>(entity =>
            {
                entity.HasKey(e => new { e.ScdId, e.EmpCode });
            });

            modelBuilder.Entity<TimeAttRealtime>(entity =>
            {
                entity.HasKey(e => e.TarId);

                entity.ToTable("TIME_ATT_REALTIME");

                entity.Property(e => e.TarId).HasColumnName("TAR_ID");

                entity.Property(e => e.CardNo)
                    .HasColumnName("card_no")
                    .HasMaxLength(15);

                entity.Property(e => e.EmpCode)
                    .HasColumnName("emp_code")
                    .HasMaxLength(20);

                entity.Property(e => e.EmpId).HasColumnName("emp_id");

                entity.Property(e => e.MLat)
                    .HasColumnName("m_lat")
                    .HasMaxLength(50);

                entity.Property(e => e.MLong)
                    .HasColumnName("m_long")
                    .HasMaxLength(50);

                entity.Property(e => e.MnId).HasColumnName("MN_ID");

                entity.Property(e => e.Remark)
                    .HasColumnName("remark")
                    .HasMaxLength(300);

                entity.Property(e => e.TarDate)
                    .HasColumnName("tar_date")
                    .HasColumnType("date");

                entity.Property(e => e.TarIp)
                    .HasColumnName("tar_ip")
                    .HasMaxLength(15);

                entity.Property(e => e.TarTime)
                    .HasColumnName("tar_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.TarType)
                    .HasColumnName("tar_type")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1: บัตร, 2:map");
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("USER_GROUP_PK");

                entity.Property(e => e.GroupDetail).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.UsrId).ValueGeneratedNever();
            });

            modelBuilder.Entity<XCnfMeeting>(entity =>
            {
                entity.HasKey(e => e.CmtId)
                    .HasName("PK_CNF_MEETING");

                entity.Property(e => e.CmtCreateDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CmtStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.CmtUpdateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<sp_mb_profile_default>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_image_slide>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_news_list>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_news_detail>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_noti_list>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_benefits>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_depart_contact>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_emp_inout_realtime>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_get_setting>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_emp_profile>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_emp_ot_hours>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_emp_ot_quota>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_emp_benefits>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_emp_under>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_depart_inout_realtime>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_depart_ot_hours>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_depart_ot_quota>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_master_leave>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_depart_leave>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<TimeAttImage>(entity =>
            {
                entity.HasKey(e => e.TariId);

                entity.ToTable("TIME_ATT_IMAGE");

                entity.Property(e => e.TariId).HasColumnName("TARI_ID");

                entity.Property(e => e.TarId).HasColumnName("TAR_ID");

                entity.Property(e => e.TariImage)
                    .HasColumnName("tari_image")
                    .HasMaxLength(300);

                entity.Property(e => e.TariUpdateDate)
                    .HasColumnName("tari_update_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<sp_mb_salary>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_meeting>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_meeting_checkin>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_training_year>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_training_project>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_training_lot>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_training_detail>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_notimap_detail>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_notimap_image>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_emp_work_summary>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_get_holiday>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<sp_mb_get_schedule>(entity =>
            {
                entity.HasNoKey();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}